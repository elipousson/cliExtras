% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cliExtras.R
\name{cli_abort_ifnot}
\alias{cli_abort_ifnot}
\alias{cli_warn_ifnot}
\title{Signal an error, warning or message with a cli formatted message if a
condition is FALSE}
\usage{
cli_abort_ifnot(
  ...,
  condition = FALSE,
  .data = NULL,
  call = .envir,
  .envir = parent.frame()
)

cli_warn_ifnot(..., condition = FALSE, .data = NULL, .envir = parent.frame())
}
\arguments{
\item{...}{Passed to \code{\link[rlang:abort]{rlang::abort()}}, \code{\link[rlang:abort]{rlang::warn()}} or
\code{\link[rlang:abort]{rlang::inform()}}.}

\item{condition}{if condition is not logical, it is assumed to be a single
argument function that is applied to the object passed to the .data
parameter.}

\item{.data}{object to test with condition if condition is a function.}

\item{call}{The execution environment of a currently running
function, e.g. \code{call = caller_env()}. The corresponding function
call is retrieved and mentioned in error messages as the source
of the error.

You only need to supply \code{call} when throwing a condition from a
helper function which wouldn't be relevant to mention in the
message.

Can also be \code{NULL} or a \link[rlang:topic-defuse]{defused function call} to
respectively not display any call or hard-code a code to display.

For more information about error calls, see \ifelse{html}{\link[rlang:topic-error-call]{Including function calls in error messages}}{\link[rlang:topic-error-call]{Including function calls in error messages}}.}

\item{.envir}{Environment to evaluate the glue expressions in.}
}
\description{
Signal an error, warning or message with a cli formatted message if a
condition is FALSE
}
