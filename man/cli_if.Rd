% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cli_if.R
\name{cli_if}
\alias{cli_if}
\alias{cli_ifnot}
\title{Execute a cli function if a predicate function returns TRUE}
\usage{
cli_if(
  x = NULL,
  ...,
  .predicate = rlang::is_true,
  .fn = NULL,
  .default = cli::cli_alert,
  .envir = rlang::caller_env(),
  call = rlang::caller_env()
)

cli_ifnot(
  x = NULL,
  ...,
  .predicate = rlang::is_false,
  .fn = NULL,
  .default = cli::cli_alert,
  .envir = rlang::caller_env(),
  call = rlang::caller_env()
)
}
\arguments{
\item{x}{Parameter to passed to .predicate function, Default: \code{NULL}}

\item{...}{Additional parameters passed to .fn.}

\item{.predicate}{Single parameter predicate function, Defaults to
\code{rlang::is_true} for \code{\link[=cli_if]{cli_if()}} or \code{rlang::is_false} for \code{\link[=cli_ifnot]{cli_ifnot()}}. If
.predicate returns \code{TRUE}, execute .fn. Aborts if .predicate does not
return a boolean value.}

\item{.fn}{Function to call with ... parameters if x, Default: \code{NULL}}

\item{.default}{Default function to execute when .predicate function returns
\code{TRUE}, Default: \code{cli::cli_alert}}

\item{call}{The execution environment of a currently
running function, e.g. \code{caller_env()}. The function will be
mentioned in error messages as the source of the error. See the
\code{call} argument of \code{\link[rlang:abort]{abort()}} for more information.}
}
\value{
The output from the .fn function or .default if .fn is \code{NULL}
}
\description{
Execute a function if a predicate function returns TRUE. Intended for use
with cli functions.
}
\examples{
cli_if(FALSE, "No alert.")

cli_if(TRUE, "Alert on TRUE!")

cli_ifnot(FALSE, "Alert on FALSE!")

}
